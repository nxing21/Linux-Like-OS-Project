Oct 12th, 2023:
    - Had a bug where running the OS would boot-loop.
    - Fixed by commenting out 'launch tests()' from kernel.c and implementing gdt.
    - Took about 7 hours.

Oct 14th, 2023:
    - Fixed an issue with implementing the PIC
    - The OS would crash and close out every time the PIC was initialized
    - Fixed by sending 0xFF to the data port of the PIC at the end of initializing the PIC.
    - Took about 5 hours to solve.

Oct 15th, 2023:
    - Incorrect addresses after running 'info mem'.
    - Fixed by correcting video memory from being a page table to being a page.
    - Took about 4 hours.

Oct 15th, 2023:
    - Ran into an issue where the OS would be continually boot looping after implementing paging
    - Fixed by changing the page table's base addresses from 'i * ALIGN' to 'i'.
    - Took about 4 hours.

---------------------------------------------------------------------------------
Oct 16th, 2023:
    - Ran into some issues while implementing the CAPS lock.
    - At first, the CAPS lock press and release was not registering.
        - The issue was that the mapping was wrong. Fixed the scan code mapping.
    - Weird characters appeared after turning on and typing in CAPS lock  
        - Fixed the issue by setting a conditional that would not map scan codes that 
        was greater than SCAN_CODE_MAP_DATA (59)
    - Issue where the user could not leave the CAPS LOCK
        - Fixed the issue by changing some of the logic in my conditionals.
Overall, all of these issues took around an hour to debug.

Oct 16th, 2023:
    - Ran into some some miscallenous issues where random keys would not register
    or would not type the right key.
    - Fixed this issue by changing the mapping data according to the scan keys and the 
    ASCII table.
Overall, this issue took about 15 minutes to debug.

Oct 16th, 2023:
    - Ran into an issue when trying to implement CAPS lock and shift at the same time.
    - The CAPS & Shift case would act the same as no special keys activated.
    - Fixed this issue by changing some of the if logic behind implementing CAPS lock
    and Shift. 
    - Took about 10 minutes to solve.

Oct 18th, 2023:
    - Ran into an issue when trying to use terminal driver to print characters
    - Random characters would appear after the expected character.
    - Fixed it by putting up a buffer limit (1 byte to read)
    - Took about 15 minutes to solve.

Oct 19th, 2023:
    - Ran into an issue when trying to set the RTC dividing rate.
    - The frequency of my specified rate seemed off.
    - Fixed it by reading through documentation and figuring out that the corresponding
    is equal to the maximum frequency shifted right by (rate-1) rather than just shifted
    by (rate).
Overall, took around 3 hours to resolve.

Oct 20th, 2023:
    - Ran into issue with file system, where program page faults after trying to access
    the starting data block address.
    - Found by adding print statements throughout the read_data function, and seeing
    where is the last print statement reached.
    - Fixed by editing one variable that was incorrect (used inode length instead
    of number of inodes).
    - Took about 30 minutes to fix.

Oct 21st, 2023
    - Program prints random garbage characters on string when trying to read text files
    like frame0.txt.
    - Took a long time to debug, added print statements throughout our read_data function.
    - The issue was solved by using memcpy to copy to our buffer instead of directly
    editing the buffer (for loop and write to buf[i]).
    - Most likely was because we were copying the address of what we were actually
    supposed to put into the buffer.
    - It took us 2-3 hours to realize the issue.

Oct 21st, 2023
    - read_file with file descriptor implementation was page faulting
    - Took a long time to debug, added page fault location functionality to our page fault handler
    - After seeing where the page fault was occuring in memory, I realized I was accessing a null pointer 
    - Turns out I was trying to access a dentry pointer that wasn't set
    - It took us 2 hours of debugging to locate and fix the issue.

Oct 22nd, 2023
    - Faced an issue where I could not see 'ELF' printing when trying to read executables
    (file system issue).
    - Fixed this issue after discussing with teammate who worked mostly on terminal, who
    suggested to use an updated version of the putc function that he wrote.
    - Overall, took about an hour to realize the issue, and was very quick to solve.
    - Took about 30 minutes to fix.

Oct 30th, 2023
    - Had an issue where the first iret would page fault. 
    - At first we thought it was an inline assembly issue with out stack, so we gdb'd
    through our code and our stack was fine. 
    - So we set a breakpoint in our linkage and noticed that the sys_write and sys_read was null
    - We forgot to set stdin and stdout in our pcb file array
    - This bug cost us about 5 hours.

Oct 31st, 2023
    - Had an issue where the 'ls' executable does not work, even though 'testprint' and 'hello'
    worked.
    - We used GDB to realize how to fix this issue. The issue was our fops table was getting
    overwritten by the system_execute, so we made an init_fops_table() function and called that
    from kernel.
    - This bug cost us about 3 hours.



Nov 1st, 2023
    - Faced an issue where the system_execute was not recognizing the inputs properly. For example,
    it would recognize an input of 'testpr' as 'testprint'.
    - This was fixed by editing the read_dentry_by_name function, as it wasn't comparing strings
    properly (we were inputting the incorrect length).
    - This bug cost us about 1 hour.

Nov 2nd, 2023
    - Faced issue where we were page faulting when system_halt was called (it would not return back
    to the shell like we wanted).
    - The issue was we were trying to update the esp and ebp registers with the parent pcb, when it
    was supposed to be updated with the current pcb, based on our design.
    - This bug cost us about 7 hours.

Nov 3rd, 2023
    - Our sys err was failing stdin and stdout checks like not being able to system_read stdout and system_write stdin.
    - The issue was we didn't add sufficient checks to our system read and write. 
    - Took about 10 minutes to find and fix.

Nov 3rd: 2023:
    - Faced an issue where typing "exit" into the shell would not work as intended
    - We noticed that after typing ls, and then typing "exit", the program would page fault.
    - We then noted that after first booting up the shell and then just typing "exit" with no other commands, a page fault
    would not occur.
    - We then figured out that we were not updating current pid in system system_halt.
    - We updated current id to equal parent pid.
    - Took us about 15 minutes. 

Nov 9th: 2023:
    - Fixed an issue where running multiple shells would not close properly.
    - When running more than two shells, trying to close them would cause a page fault.
    - While using GDB, we noticed that after typing "exit" for a second time, system_halt would be repeatedly called.
    - Our first change was to set the parent_pid of the child process in system execute, as we did not set that up
    - In system_halt, we saw that our ss and our esp0 were being restored to the parent processes's pcb. However, in system_execute,
    we were storing the original proceses's esp0 and ss in the child's pcb.
    - We then set it so that the tss holds the esp0 and ss of the child's pcb.
    - Took us about 7 hours to fix. 


Nov 10th: 2023:
    - Faced an issue where fish was not displaying the correct animation
    - We noticed that after open set fd 2 file_op_ptr to rtc functions, it got overwritten by the next open.
    - This exposed that our system open wasn't working as intended, it overwrote all the other general use file op table ptr functions.
    - We then figured out that since we were using the same f_ops variable and setting each fd's pointer to it's address, every subsequent open
    - would change any fd file op ptr that had been set to the address of that variable.
    - To fix that we just made separate f_ops tables for each type of file. 
    - This also fixed our grep function
    - Took us about 1 hour.